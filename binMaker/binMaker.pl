#!/usr/local/bin/perl -w
use Getopt::Long;
use Pod::Usage;

my $man = '';
my $help = '';
my $input = '';
my $output = '';
my $windowsize = '';
my $refname = 'NOREFNAME';
my $reflength = '';
my $lane = '';

## Parse options and print usage if there is a syntax error,
## or if usage was explicitly requested.
GetOptions('help|?' => \$help,
			man => \$man,
			'input=s' => \$input,
			'output=s' => \$output,
			'window=i' => \$windowsize,
			'refname=s' => \$refname,
			'reflength=s' => \$reflength,
			'lane=s' => \$lane,
			)
 or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-verbose => 2) if $man;
pod2usage(1) unless ($input && $output && $windowsize);


#read refseq_length
if($reflength)
{
	my $norefname="NOREFNAME";
	my %lengthdetail;
	open INPUT2,"<$reflength" or die "$!";
	while (<INPUT2>) {
		chop;
		/^#/ and next;
		$_ =~ s/\s*$//g;
		@line = split (/\t/,$_);
		if($line[0] =~ /:/)
		{
			$lengthdetail{$`}{$'}=$line[1];
		}
		else
		{
			$lengthdetail{$norefname}{$line[0]}=$line[1];
		}
	}
	close INPUT2;
	if(exists $lengthdetail{$refname})
	{
		foreach (keys %{$lengthdetail{$refname}})
		{
			$maxbin=int (($lengthdetail{$refname}{$_}-1)/$windowsize);
			$number{$_}{$maxbin}=0;
		}
	}

}


open (INPUT,"$input") or die "can't open input FILE: $!";
while(<INPUT>)
{
	chop;
	/^#/ and next;
	$_ =~ s/\s*$//g;
	@line = split (/\t/,$_);
	$bin=int (($line[1]-1)/$windowsize);
	$number{$line[0]}{$bin}++;
}
close (INPUT);

open (OUTPUT,">$output") or die "can't open OUT-FILE: $!";
print OUTPUT "#seqid\tbin_start\tbin_end\tbin_data\tref_name\n";
foreach $chr (sort keys %number)
{
	#to add bins of "0"
	$lastbin=-1;
	foreach $bin (sort {$a <=> $b} keys %{$number{$chr}})
	{
		if($bin-$lastbin > 1) # detect if there is a gap between 2 bins.
		{
			for($i=$lastbin+1;$i<$bin;$i++)
			{
				$binstart=$i*$windowsize+1;
				$binend=($i+1)*$windowsize;
				if($lane)
				{
					if($refname ne "NOREFNAME")
					{
						print OUTPUT "$lane:$chr\t$binstart\t$binend\t0\t$refname\n";
					}
					else
					{
						print OUTPUT "$lane:$chr\t$binstart\t$binend\t0\t\n";
					}
				}
				else
				{
					if($refname ne "NOREFNAME")
					{
						print OUTPUT "$chr\t$binstart\t$binend\t0\t$refname\n";
					}
					else
					{
						print OUTPUT "$chr\t$binstart\t$binend\t0\t\n";
					}
				}
			}
		}
		$lastbin=$bin;
		$binstart=$bin*$windowsize+1;
		$binend=($bin+1)*$windowsize;
		if($lane)
		{
			if($refname ne "NOREFNAME")
			{
				print OUTPUT "$lane:$chr\t$binstart\t$binend\t$number{$chr}{$bin}\t$refname\n";
			}
			else
			{
				print OUTPUT "$lane:$chr\t$binstart\t$binend\t$number{$chr}{$bin}\t\n";
			}
		}
		else
		{
			if($refname ne "NOREFNAME")
			{
				print OUTPUT "$chr\t$binstart\t$binend\t$number{$chr}{$bin}\t$refname\n";
			}
			else
			{
				print OUTPUT "$chr\t$binstart\t$binend\t$number{$chr}{$bin}\t\n";
			}
		}
	}
}
close (OUTPUT);
__END__

=head1 NAME

binMaker.pl - Counting elements in bins

=head1 SYNOPSIS

binMaker.pl [options]

 Options:
   -help            brief help message
   -man             full documentation
   -input           input file
   -output          output file
   -window          window size
   -refname         reference name
   -reflength       reference length
   -lane            lane tag

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=item B<-input>

Input data from a file in Tab delimited text format. For example,

 #chr	position
 chr01	1354
 chr01	1547
 ...

=item B<-output>

Output data to a file.

=item B<-window>

Set the window size (int > 0) for each bin.

=item B<-refname> (optional)

refname is for giving a name (such as spiece) for the reference sequence.

=item B<-reflength> (optional)

sequence legnth file name. For example: (generated by seqLength.pl)

 #seqid	length
 IRGSP:chr01	43268879
 IRGSP:chr02	35930381
 ...

=item B<-lane> (optional)

Set a tag for different individuals (like lane names).

=back

=head1 DESCRIPTION

B<binMaker> will ...

=head1 AUTHOR 

Jianwei Zhang @ Arizona Genomics Institute

=head1 EMAIL

jzhang@cals.arizona.edu

=head1 BUGS

none.

=head1 SEE ALSO 

piBinMaker.pl tdBinMaker.pl thetaBinMaker.pl bin2png.pl

=head1 COPYRIGHT 

This program is free software. You may copy or redistribute it under the same terms as Perl itself.

=cut
